{"version":3,"sources":["components/Nav.js","components/Saludo.js","components/LinkImagen.js","components/Reconocer.js","components/Description.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","Saludo","LinkImagen","onInputChange","onBtnSubmit","type","onChange","onClick","Reconocer","imagenURL","src","alt","width","height","Description","id","Footer","app","Clarifai","App","apiKey","descriptionImage","data","first","outputs","concepts","name","second","third","fourth","fifth","muestra1","document","getElementById","muestra2","muestra3","muestra4","muestra5","innerHTML","e","setState","input","target","value","state","models","predict","GENERAL_MODEL","then","response","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8a7c6e94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Nav = () => {\r\n    return ( \r\n        <div className=\"nav\">\r\n            <div className=\"logo\">\r\n                <h1>What's in there...?</h1>\r\n            </div>\r\n\r\n            <div className=\"acceso\">\r\n                <a href=\"https://studmuffin.tech\" className=\"acceso-link\">My Portfolio</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Nav;","import React from 'react';\r\n\r\nconst Saludo = () => {\r\n    return ( \r\n        <div className=\"saludo\">\r\n            {'Hi there!'}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Saludo;","import React from 'react';\r\nimport Saludo from './Saludo'\r\n\r\nconst LinkImagen = ({onInputChange, onBtnSubmit}) => {\r\n\r\n    return(\r\n        <div className=\"form-full\">\r\n            <Saludo/>\r\n            <p>{`What's in there...? Here you will be able to detect what's in your image.`}</p>\r\n            <p>{`Paste the link of the image in here and click verify.`}</p>\r\n            <div className=\"form\">\r\n                <input \r\n                    type=\"text\"\r\n                    onChange={onInputChange} \r\n                />\r\n                <button\r\n                    onClick={onBtnSubmit}\r\n                >Verify</button>\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n \r\nexport default LinkImagen;","import React from 'react';\r\n\r\nconst Reconocer = ({imagenURL}) => {\r\n    return ( \r\n        <div className=\"form-full\">\r\n            <div className=\"reco-img\">\r\n                <img src={imagenURL} alt=\"\" width=\"500\" height=\"auto\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Reconocer;","import React from 'react';\r\n\r\nconst Description = () => {\r\n    return ( \r\n        <div className=\"desc-box\">\r\n            <p>First Match: <span id=\"primera\" className=\"details\"></span></p>\r\n            <p>Second Match: <span id=\"segunda\" className=\"details\"></span></p>\r\n            <p>Third Match: <span id=\"tercera\" className=\"details\"></span></p>\r\n            <p>Fourth Match: <span id=\"cuarta\" className=\"details\"></span></p>\r\n            <p>Fifth Match: <span id=\"quinta\" className=\"details\"></span></p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Description;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return ( \r\n        <div className=\"footer\">\r\n            <h2>Created with love by Juan Abimael Santos Castillo.</h2>\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default Footer;","import React, { Component } from 'react';\nimport Clarifai from 'clarifai';\nimport Nav from './components/Nav';\nimport Link from './components/LinkImagen';\nimport Reconocer from './components/Reconocer';\nimport Description from './components/Description';\nimport Particles from 'react-particles-js';\nimport Footer from './components/Footer';\n\nconst app = new Clarifai.App({\n  apiKey: '729ec32cd5f04bef922cd3c39b7fb676'\n });\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imagenURL: ''\n    };\n  }\n\n  descriptionImage = (data) => {\n    //Toma de la information relacionada\n    const first = data.outputs[0].data.concepts[0].name;\n    const second = data.outputs[0].data.concepts[1].name;\n    const third = data.outputs[0].data.concepts[2].name;\n    const fourth = data.outputs[0].data.concepts[3].name;\n    const fifth = data.outputs[0].data.concepts[4].name;\n\n    //Recoge de los campos JSX\n    const muestra1 = document.getElementById('primera');\n    const muestra2 = document.getElementById('segunda');\n    const muestra3 = document.getElementById('tercera');\n    const muestra4 = document.getElementById('cuarta');\n    const muestra5 = document.getElementById('quinta');\n\n    //Muestra\n    muestra1.innerHTML = first;\n    muestra2.innerHTML = second;\n    muestra3.innerHTML = third;\n    muestra4.innerHTML = fourth;\n    muestra5.innerHTML = fifth;\n\n  }\n  \n  onInputChange = (e) => {\n    this.setState({input: e.target.value})\n  }\n\n  onBtnSubmit = () => {\n    this.setState({imagenURL: this.state.input});\n    app.models.predict(Clarifai.GENERAL_MODEL, this.state.input)\n    .then(response => this.descriptionImage(response))\n    .catch(err => console.log(err));\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Particles className=\"parts\" />\n        <Nav/>\n        <Link\n          onInputChange={this.onInputChange}\n          onBtnSubmit={this.onBtnSubmit}\n        />\n        <Reconocer imagenURL={this.state.imagenURL}/>\n        <Description />\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}